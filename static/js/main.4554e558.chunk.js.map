{"version":3,"sources":["Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","window","jQuery","$","Popper","web3s","Object","values","providers","provider","_arr","_i","web3","Web3","http","eth","net","isListening","then","nodeIsOk","name","length","App_loop","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","result","e","txHash","address","_this2","input","target","value","startsWith","Web3Utils","isAddress","setState","loading","Promise","all","keys","map","network","getBalance","fromWei","getTransactionCount","getCode","code","_ref","_ref2","slicedToArray","balance","txCount","isContract","parseFloat","type","results","filter","res","getTransaction","getBlockNumber","_ref3","_ref4","tx","blockNum","blockHeight","blockNumber","from","to","gasPrice","gasUsed","gas","Fragment","style","maxWidth","placeholder","onChange","bind","i","params","objectWithoutProperties","key","textAlign","param","j","textTransform","String","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4554e558.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header() {\n  return (\n    <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm\">\n      <h5 className=\"my-0 mr-md-auto font-weight-normal\">Eth Validate</h5>\n      <nav className=\"my-2 my-md-0 mr-md-3\">\n        <a className=\"p-2 text-dark\" href=\"/\">\n          Docs\n        </a>\n      </nav>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport Web3Utils from \"web3-utils\";\nimport providers from \"./providers.json\";\n\n// Boostrap loaders\nimport * as $ from \"jquery\";\nimport Popper from \"popper.js\";\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./App.css\";\n\nimport Header from \"./Header\";\n\n// Initialize boostrap dependencies\nwindow.jQuery = window.$ = $;\nwindow.Popper = Popper;\n\n// Initialize web3 instances\nconst web3s = {};\nfor (const provider of Object.values(providers)) {\n  const web3 = new Web3(provider.http);\n  web3.eth.net.isListening().then(nodeIsOk => {\n    if (nodeIsOk) web3s[provider.name] = web3;\n  });\n}\nwindow.web3s = web3s;\n\n// TXHASH is 32 bytes = 64 characters in hex\n// ADDRESS is 20 bytes = 40 characters in hex\n\nconst checkAddress = address =>\n  Promise.all(\n    Object.keys(web3s).map(network =>\n      Promise.all([\n        web3s[network].eth.getBalance(address).then(Web3Utils.fromWei),\n        web3s[network].eth.getTransactionCount(address),\n        web3s[network].eth.getCode(address).then(code => code.length > 2)\n      ]).then(([balance, txCount, isContract]) =>\n        parseFloat(balance) === 0 && parseFloat(txCount) === 0 && !isContract\n          ? null\n          : {\n              type: \"address\",\n              address,\n              network,\n              balance,\n              txCount,\n              isContract\n            }\n      )\n    )\n  ).then(results => results.filter(res => res));\n\nconst checkTx = txHash =>\n  Promise.all(\n    Object.keys(web3s).map(network =>\n      Promise.all([\n        web3s[network].eth.getTransaction(txHash),\n        web3s[network].eth.getBlockNumber()\n      ]).then(([tx, blockNum]) =>\n        tx\n          ? {\n              type: \"tx\",\n              txHash,\n              network,\n              blockHeight: tx.blockNumber\n                ? blockNum - tx.blockNumber\n                : \"pending\",\n              from: tx.from,\n              to: tx.to,\n              value: tx.value,\n              gasPrice: tx.gasPrice,\n              gasUsed: tx.gas\n            }\n          : null\n      )\n    )\n  ).then(results => results.filter(res => res));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n      result: []\n    };\n  }\n\n  onChange(e) {\n    let input = e.target.value;\n    if (!input || !input.startsWith(\"0x\")) return;\n    if (input.length === 40 + 2 && Web3Utils.isAddress(input)) {\n      this.setState({ loading: true });\n      checkAddress(input).then(result => {\n        this.setState({ result, loading: false });\n      });\n    } else if (input.length === 64 + 2) {\n      this.setState({ loading: true });\n      checkTx(input).then(result => {\n        this.setState({ result, loading: false });\n      });\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n          <p className=\"lead\">\n            Enter an address, tx hash or token contract from any ethereum chain\n          </p>\n          <div\n            className=\"input-group mb-3 mx-auto\"\n            style={{ maxWidth: \"700px\" }}\n          >\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter address or Tx hash...\"\n              onChange={this.onChange.bind(this)}\n            />\n          </div>\n          {this.state.loading ? <h6>Loading...</h6> : null}\n          <div>\n            {this.state.result.map((res, i) => {\n              const { network, type, ...params } = res;\n              return (\n                <div\n                  key={i}\n                  className=\"card mx-auto\"\n                  style={{ maxWidth: \"700px\" }}\n                >\n                  <div className=\"card-body\" style={{ textAlign: \"left\" }}>\n                    <h5 className=\"card-title\">\n                      {network} ({type})\n                    </h5>\n                    {Object.keys(params).map((param, j) => (\n                      <p key={j} className=\"card-text no-bottom\">\n                        <strong style={{ textTransform: \"capitalize\" }}>\n                          {param}:\n                        </strong>{\" \"}\n                        {String(params[param])}\n                      </p>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
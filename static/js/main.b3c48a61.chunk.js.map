{"version":3,"sources":["Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","activeProviders","react_default","a","createElement","className","length","join","href","window","jQuery","$","Popper","web3s","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","result","_this2","Promise","all","values","providers","map","provider","web3","Web3","http","eth","net","isListening","then","nodeIsOk","name","catch","console","error","providerNames","filter","setState","e","txHash","address","_this3","input","target","value","startsWith","Web3Utils","isAddress","loading","keys","network","getBalance","fromWei","getTransactionCount","getCode","code","_ref2","slicedToArray","balance","txCount","isContract","parseFloat","type","results","res","getTransaction","getBlockNumber","_ref3","_ref4","tx","blockNum","blockHeight","blockNumber","from","to","gasPrice","gasUsed","gas","Fragment","style","maxWidth","placeholder","onChange","bind","i","params","objectWithoutProperties","key","textAlign","param","j","textTransform","String","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3c48a61.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header({ activeProviders }) {\n  return (\n    <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm\">\n      <h5 className=\"my-0 mr-md-auto font-weight-normal\">Eth Validate</h5>\n      <nav className=\"my-2 my-md-0 mr-md-3\">\n        <span className=\"p-2 text-dark\">\n          Active providers:{\" \"}\n          {activeProviders.length ? activeProviders.join(\", \") : \"none\"}\n        </span>\n        <a className=\"p-2 text-dark\" href=\"/\">\n          Docs\n        </a>\n      </nav>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport Web3Utils from \"web3-utils\";\nimport providers from \"./providers.json\";\n\n// Boostrap loaders\nimport * as $ from \"jquery\";\nimport Popper from \"popper.js\";\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./App.css\";\n\nimport Header from \"./Header\";\n\n// Initialize boostrap dependencies\nwindow.jQuery = window.$ = $;\nwindow.Popper = Popper;\n\nconst web3s = {};\n\nconst checkAddress = address =>\n  Promise.all(\n    Object.keys(web3s).map(network =>\n      Promise.all([\n        web3s[network].eth.getBalance(address).then(Web3Utils.fromWei),\n        web3s[network].eth.getTransactionCount(address),\n        web3s[network].eth.getCode(address).then(code => code.length > 2)\n      ]).then(([balance, txCount, isContract]) =>\n        parseFloat(balance) === 0 && parseFloat(txCount) === 0 && !isContract\n          ? null\n          : {\n              type: \"address\",\n              address,\n              network,\n              balance,\n              txCount,\n              isContract\n            }\n      )\n    )\n  ).then(results => results.filter(res => res));\n\nconst checkTx = txHash =>\n  Promise.all(\n    Object.keys(web3s).map(network =>\n      Promise.all([\n        web3s[network].eth.getTransaction(txHash),\n        web3s[network].eth.getBlockNumber()\n      ]).then(([tx, blockNum]) =>\n        tx\n          ? {\n              type: \"tx\",\n              txHash,\n              network,\n              blockHeight: tx.blockNumber\n                ? blockNum - tx.blockNumber\n                : \"pending\",\n              from: tx.from,\n              to: tx.to,\n              value: tx.value,\n              gasPrice: tx.gasPrice,\n              gasUsed: tx.gas\n            }\n          : null\n      )\n    )\n  ).then(results => results.filter(res => res));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n      result: [],\n      activeProviders: []\n    };\n  }\n\n  componentWillMount() {\n    // Initialize web3 instances\n    Promise.all(\n      Object.values(providers).map(provider => {\n        const web3 = new Web3(provider.http);\n        return web3.eth.net\n          .isListening()\n          .then(nodeIsOk => {\n            if (nodeIsOk) {\n              web3s[provider.name] = web3;\n              return provider.name;\n            }\n          })\n          .catch(console.error);\n      })\n    ).then(providerNames => {\n      const activeProviders = providerNames.filter(name => name);\n      this.setState({ activeProviders });\n    });\n  }\n\n  onChange(e) {\n    let input = e.target.value;\n    if (!input || !input.startsWith(\"0x\")) return;\n\n    // ADDRESS is 20 bytes = 40 characters in hex\n    // TXHASH is 32 bytes = 64 characters in hex\n    if (input.length === 40 + 2 && Web3Utils.isAddress(input)) {\n      this.setState({ loading: true });\n      checkAddress(input).then(result => {\n        this.setState({ result, loading: false });\n      });\n    } else if (input.length === 64 + 2) {\n      this.setState({ loading: true });\n      checkTx(input).then(result => {\n        this.setState({ result, loading: false });\n      });\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header activeProviders={this.state.activeProviders} />\n        <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n          <p className=\"lead\">\n            Enter an address, tx hash or token contract from any ethereum chain\n          </p>\n          <div\n            className=\"input-group mb-3 mx-auto\"\n            style={{ maxWidth: \"700px\" }}\n          >\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter address or Tx hash...\"\n              onChange={this.onChange.bind(this)}\n            />\n          </div>\n          {this.state.loading ? <h6>Loading...</h6> : null}\n          <div>\n            {this.state.result.map((res, i) => {\n              const { network, type, ...params } = res;\n              return (\n                <div\n                  key={i}\n                  className=\"card mx-auto\"\n                  style={{ maxWidth: \"700px\" }}\n                >\n                  <div className=\"card-body\" style={{ textAlign: \"left\" }}>\n                    <h5 className=\"card-title\">\n                      {network} ({type})\n                    </h5>\n                    {Object.keys(params).map((param, j) => (\n                      <p key={j} className=\"card-text no-bottom\">\n                        <strong style={{ textTransform: \"capitalize\" }}>\n                          {param}:\n                        </strong>{\" \"}\n                        {String(params[param])}\n                      </p>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}